<?xml version="1.0" encoding="UTF-8"?>
<!-- Generator: Adobe Illustrator 23.0.3, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 50" style="enable-background:new 0 0 100 50;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#EF9122;}
	.st1{fill:#F26E21;}
	.st2{fill:#F44500;}
	.st3{fill:#595A5B;}
	.st4{fill:#3B3D3F;}
</style>
<circle class="st0" cx="52.8" cy="19.1" r="6.2"/>
<path class="st1" d="M46.6,19.1c0-3.5,2.8-6.2,6.2-6.2s6.2,2.8,6.2,6.2s-2.8,6.2-6.2,6.2"/>
<path class="st2" d="M48.5,14.7c2.4-2.4,6.3-2.4,8.7,0c2.4,2.4,2.4,6.3,0,8.7"/>
<path class="st3" d="M16.8,13.2h-3.3v11.7h3.3c1.8,0,3.1-0.5,4.2-1.3c1.3-1.1,2.2-2.8,2.2-4.5C23.1,15.6,20.6,13.2,16.8,13.2z   M19.5,22.1c-0.7,0.6-1.7,1-3.1,1h-0.7v-7.8h0.6c1.4,0,2.4,0.2,3.1,1c0.8,0.7,1.3,1.8,1.3,2.9C20.8,20.2,20.4,21.4,19.5,22.1z"/>
<rect id="SVGCleanerId_0" x="24.2" y="13.2" class="st3" width="2.3" height="11.7"/>
<path class="st3" d="M32.2,17.8c-1.4-0.5-1.8-0.8-1.8-1.4c0-0.7,0.7-1.3,1.7-1.3c0.7,0,1.3,0.2,1.9,1l1.2-1.6  c-1-0.8-2.2-1.3-3.5-1.3c-2,0-3.7,1.4-3.7,3.3c0,1.7,0.7,2.4,2.9,3.2c1,0.4,1.3,0.5,1.6,0.7c0.5,0.2,0.7,0.7,0.7,1.2  c0,1-0.7,1.7-1.8,1.7c-1.1,0-2-0.6-2.5-1.6l-1.4,1.4c1.1,1.6,2.4,2.3,4.1,2.3c2.4,0,4.1-1.6,4.1-3.8C35.5,19.6,34.8,18.7,32.2,17.8z  "/>
<path class="st4" d="M36.3,19.1c0,3.5,2.8,6.1,6.2,6.1c1,0,1.8-0.2,2.9-0.7v-2.8c-1,1-1.8,1.3-2.8,1.3c-2.3,0-3.9-1.7-3.9-4.1  c0-2.3,1.7-4.1,3.8-4.1c1.1,0,1.9,0.4,2.9,1.3v-2.8c-1-0.5-1.8-0.7-2.9-0.7C39.1,13,36.3,15.7,36.3,19.1z"/>
<polygon points="64.1,21.1 61,13.2 58.5,13.2 63.4,25.3 64.7,25.3 69.9,13.2 67.4,13.2 "/>
<polygon points="70.8,24.9 77.4,24.9 77.4,23 73.2,23 73.2,19.8 77.3,19.8 77.3,17.8 73.2,17.8 73.2,15.3 77.4,15.3 77.4,13.2   70.8,13.2 "/>
<g>
	<path class="st3" d="M83.9,20c1.8-0.4,2.8-1.6,2.8-3.3c0-2.2-1.6-3.5-4.2-3.5H79v11.7h2.3v-4.7h0.4l3.2,4.7h2.8L83.9,20z M82,18.6   h-0.7V15H82c1.4,0,2.3,0.6,2.3,1.8S83.4,18.6,82,18.6z"/>
	<path class="st3" d="M16.8,13.2h-3.3v11.7h3.3c1.8,0,3.1-0.5,4.2-1.3c1.3-1.1,2.2-2.8,2.2-4.5C23.1,15.6,20.6,13.2,16.8,13.2z    M19.5,22.1c-0.7,0.6-1.7,1-3.1,1h-0.7v-7.8h0.6c1.4,0,2.4,0.2,3.1,1c0.8,0.7,1.3,1.8,1.3,2.9C20.8,20.2,20.4,21.4,19.5,22.1z"/>
</g>
<g>
	<rect id="SVGCleanerId_0_1_" x="24.2" y="13.2" class="st3" width="2.3" height="11.7"/>
</g>
<g>
	<path class="st3" d="M32.2,17.8c-1.4-0.5-1.8-0.8-1.8-1.4c0-0.7,0.7-1.3,1.7-1.3c0.7,0,1.3,0.2,1.9,1l1.2-1.6   c-1-0.8-2.2-1.3-3.5-1.3c-2,0-3.7,1.4-3.7,3.3c0,1.7,0.7,2.4,2.9,3.2c1,0.4,1.3,0.5,1.6,0.7c0.5,0.2,0.7,0.7,0.7,1.2   c0,1-0.7,1.7-1.8,1.7c-1.1,0-2-0.6-2.5-1.6l-1.4,1.4c1.1,1.6,2.4,2.3,4.1,2.3c2.4,0,4.1-1.6,4.1-3.8C35.5,19.6,34.8,18.7,32.2,17.8   z"/>
	<path class="st3" d="M42.6,25.2c1,0,1.8-0.2,2.9-0.7v-2.8c-1,1-1.8,1.3-2.8,1.3c-2.3,0-3.9-1.7-3.9-4.1c0-1.2,0.5-2.2,1.2-3   l-1.6-1.6c-1.2,1.1-2,2.8-2,4.5C36.3,22.6,39,25.2,42.6,25.2z"/>
</g>
<path d="M83.9,20c1.8-0.4,2.8-1.6,2.8-3.3c0-2.2-1.6-3.5-4.2-3.5H79v11.7h2.3v-4.7h0.4l3.2,4.7h2.8L83.9,20z M82,18.6h-0.7V15H82  c1.4,0,2.3,0.6,2.3,1.8S83.4,18.6,82,18.6z"/>
<g>
	<path class="st1" d="M30.3,35.8v-6.6l4.5,4.7v-4.3h1v6.6l-4.5-4.7v4.3L30.3,35.8L30.3,35.8z"/>
	<path class="st1" d="M40.6,30.6h-2.5V32h2.4v1h-2.4v2h2.5v0.8h-3.5v-6.2h3.5V30.6z"/>
	<path class="st1" d="M43.6,30.6v5.3h-1v-5.3h-1.4v-0.8H45v0.8H43.6z"/>
	<path class="st1" d="M46.4,29.7l1.6,4.2l1.7-4.4l1.6,4.4l1.7-4.2h1.2l-2.8,6.6l-1.6-4.4l-1.7,4.4l-2.6-6.6H46.4z"/>
	<path class="st1" d="M54.2,32.7c0-0.8,0.4-1.7,1-2.3c0.6-0.6,1.4-1,2.3-1c0.8,0,1.7,0.4,2.3,1c0.6,0.6,1,1.4,1,2.3   c0,0.8-0.4,1.7-1,2.3c-0.6,0.6-1.4,1-2.3,1c-0.8,0-1.6-0.2-2.2-0.8C54.6,34.5,54.2,33.8,54.2,32.7z M55.2,32.7   c0,0.7,0.2,1.2,0.7,1.7c0.5,0.5,1,0.7,1.6,0.7c0.6,0,1.2-0.2,1.7-0.7c0.5-0.5,0.7-1,0.7-1.7s-0.2-1.2-0.7-1.7   c-0.5-0.5-1-0.7-1.7-0.7c-0.6,0-1.2,0.2-1.7,0.7C55.4,31.5,55.2,32.1,55.2,32.7z"/>
	<path class="st1" d="M64,33.2l1.9,2.6h-1.2l-1.8-2.5h-0.1v2.5h-1v-6.2h1.1c0.8,0,1.4,0.1,1.8,0.5c0.4,0.4,0.6,0.8,0.6,1.3   c0,0.5-0.1,0.8-0.4,1.1C64.7,33,64.4,33.2,64,33.2z M62.8,32.5h0.2c0.8,0,1.3-0.4,1.3-1c0-0.6-0.5-1-1.3-1h-0.4v1.9H62.8z"/>
	<path class="st1" d="M67.7,32.1l2.4-2.5h1.2l-2.8,2.8l2.8,3.3h-1.2L67.8,33l-0.2,0.2v2.5h-1v-6.2h1v2.6H67.7z"/>
</g>
<g>
	<polygon class="st4" points="75.4,23 73.2,23 73.2,20.9 70.8,18.5 70.8,24.9 77.3,24.9  "/>
	<polygon class="st4" points="66.8,14.4 64.1,21.1 61,13.2 58.5,13.2 63.4,25.3 64.7,25.3 68.6,16.2  "/>
</g>
<script xmlns="">(function (data) {
  var core = {
    "log": false,
    "hostname": function (url) {
      if ("blob:" === url.substring(0, 5)) {
        url = url.replace("blob:", '');
        url = unescape(url);
      }
      //
      var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
      var flag = (match !== null) &amp;&amp; (match.length &gt; 2) &amp;&amp; (typeof match[2] === "string") &amp;&amp; (match[2].length &gt; 0);
      return flag ? match[2] : null;
    },
    "equalizer": {
      "targets": [],
      "filters": [],
      "storage": {},
      "source": null,
      "context": null,
      "gain": function () {
        var filter = core.equalizer.context.createGain();
        filter.channelCountMode = "explicit";
        filter.gain.value = 1;
        return filter;
      },
      "biquad": function (e) {
        var filter = core.equalizer.context.createBiquadFilter();
        filter.type = e.type || core.equalizer.storage.FT.LOWPASS;
        filter.frequency.value = e.f || 0;
        filter.gain.value = e.gain || 0;
        filter.Q.value = 1;
        return filter;
      },
      "set": function (o) {
        if (o) {
          if (o.eq &amp;&amp; o.ch) {
            if (core.equalizer.filters.length &gt; 0) {
              if (core.equalizer.filters[0]) {
                core.equalizer.filters[0].channelCount = o.ch.mono ? 1 : (core.equalizer.filters[0]._defaultChannelCount ? core.equalizer.filters[0]._defaultChannelCount : 2);
                core.equalizer.filters.forEach(function (f, i) {
                  f.gain.value = o.eq[i].gain;
                });
              }
            }
          }
        }
      },
      "toggle": function (state) {
        if (state) core.equalizer.storage.state = state;
        //
        if (core.equalizer.source &amp;&amp; core.equalizer.context) {
          if (core.equalizer.filters &amp;&amp; core.equalizer.filters.length) {
            if (core.equalizer.storage.state === "ON") {
              core.equalizer.source.disconnect(core.equalizer.context.destination);
              core.equalizer.source.connect(core.equalizer.filters[0]);
            }
            //
            if (core.equalizer.storage.state === "OFF") {
              core.equalizer.source.disconnect(core.equalizer.filters[0]);
              core.equalizer.source.connect(core.equalizer.context.destination);
            }
          }
        }
      },
      "load": function () {
        if (core.log) console.error(" &gt;&gt; Searching for video/audio elements...");
        core.equalizer.filters = [];
        delete core.equalizer.context;
        //
        core.equalizer.context = new AudioContext();
        for (var i = 0; i &lt; core.equalizer.storage.eq.length; i++) {
          var node = core.equalizer.storage.eq[i];
          var filter = node.f ? core.equalizer.biquad(node) : core.equalizer.gain();
          if (filter) {
            core.equalizer.filters.push(filter);
          }
        }
        //
        if (core.log) console.error(" &gt;&gt; Equalizer is loaded!");
        core.equalizer.attach(2);
      },
      "attach": function (w) {
        if (!core.equalizer.context) core.equalizer.load();
        else {
          core.equalizer.targets.forEach(function (t, k) {
            if (t.getAttribute("equalizer-state") !== "attached") {
              var src = t.src ? t.src : t.currentSrc;
              if (src) {
                t.setAttribute("equalizer-state", "attached");
                if (core.log) console.error(" &gt;&gt; Equalizer is attached, loc", w, t.className);
                if (document.location.hostname !== core.hostname(src)) {
                  var crossorigin = t.getAttribute("crossorigin");
                  if (!crossorigin) {
                    if (src.substring(0, 5) !== "blob:") {
                      t.setAttribute("crossorigin", (crossorigin ? crossorigin : "anonymous"));
                      if (t.src) t.src = t.src + '';
                      else if (t.currentSrc) t.load();
                    }
                  }
                }
                //
                try {
                  core.equalizer.source = core.equalizer.context.createMediaElementSource(t);
                  core.equalizer.filters[0]._defaultChannelCount = core.equalizer.source.channelCount ? core.equalizer.source.channelCount : 2;
                  var target = core.equalizer.storage.state === "OFF" ? core.equalizer.context.destination : core.equalizer.filters[0];
                  core.equalizer.source.connect(target);
                  //
                  for (var i = 0; i &lt; core.equalizer.filters.length; i++) {
                    var current = core.equalizer.filters[i];
                    var next = core.equalizer.filters[i + 1];
                    //
                    current.gain.value = core.equalizer.storage.eq[i].gain;
                    if (next) current.connect(next);
                  }
                  //
                  var last = core.equalizer.filters[core.equalizer.filters.length - 1];
                  last.connect(core.equalizer.context.destination);
                  window.top.postMessage({"app": "audio-equalizer", "action": "app-icon-normal"}, '*');
                } catch (e) {
                  window.top.postMessage({"app": "audio-equalizer", "action": "app-icon-error"}, '*');
                }
              }
            }
          });
        }
      }
    }
  };
  //
  core.equalizer.storage = data;
  //
  window.addEventListener("play", function (e) {
    core.equalizer.targets.push(e.target);
    core.equalizer.attach(0);
  }, true);
  //
  window.addEventListener("message", function (e) {
    if (e.data.app === "audio-equalizer") {
      if (e.data.action === "app-set") core.equalizer.set(e.data.value);
      if (e.data.action === "app-toggle") core.equalizer.toggle(e.data.state);
    }
  }, false);
  //
  if (Audio) {
    if (Audio.prototype) {
      if (Audio.prototype.play) {
        const play = Audio.prototype.play;
        Audio.prototype.play = function () {
          core.equalizer.targets.push(this);
          core.equalizer.attach(1);
          //
          return play.apply(this, arguments);
        };
      }
    }
  }
})({"ch":{"snap":false,"mono":false},"eq":[{"label":"master","gain":1},{"label":"64","f":64,"gain":0,"type":"peaking"},{"label":"32","f":32,"gain":0,"type":"lowshelf"},{"label":"125","f":125,"gain":0,"type":"peaking"},{"label":"250","f":250,"gain":0,"type":"peaking"},{"label":"500","f":500,"gain":0,"type":"peaking"},{"label":"1k","f":1000,"gain":0,"type":"peaking"},{"label":"2k","f":2000,"gain":0,"type":"peaking"},{"label":"4k","f":4000,"gain":0,"type":"peaking"},{"label":"8k","f":8000,"gain":0,"type":"peaking"},{"label":"16k","f":16000,"gain":0,"type":"highshelf"}],"lastupdate":1590958905817,"presets":[{"name":"Club","default":true,"gains":[0,0,4.8,3.36,3.36,3.36,1.92,0,0,0]},{"name":"Live","default":true,"gains":[-2.88,0,2.4,3.36,3.36,3.36,2.4,1.44,1.44,1.44]},{"name":"Party","default":true,"gains":[4.32,4.32,0,0,0,0,0,0,4.32,4.32]},{"name":"Pop","default":true,"gains":[0.96,2.88,4.32,4.8,3.36,0,-1.44,-1.44,0.96,0.96]},{"name":"Soft","default":true,"gains":[2.88,0.96,0,-1.44,0,2.4,4.8,5.76,6.72,7.2]},{"name":"Ska","default":true,"gains":[-1.44,-2.88,-2.4,0,2.4,3.36,5.28,5.76,6.72,5.76]},{"name":"Reggae","default":true,"gains":[0,0,0,-3.36,0,3.84,3.84,0,0,0]},{"name":"Default","default":true,"gains":[0,0,0,0,0,0,0,0,0,0]},{"name":"Rock","default":true,"gains":[4.8,2.88,-3.36,-4.8,-1.92,2.4,5.28,6.72,6.72,6.72]},{"name":"Dance","default":true,"gains":[5.76,4.32,1.44,0,0,-3.36,-4.32,-4.32,0,0]},{"name":"Techno","default":true,"gains":[4.8,3.36,0,-3.36,-2.88,0,4.8,5.76,5.76,5.28]},{"name":"Headphones","default":true,"gains":[2.88,6.72,3.36,-1.92,-1.44,0.96,2.88,5.76,7.68,8.64]},{"name":"Soft rock","default":true,"gains":[2.4,2.4,1.44,0,-2.4,-3.36,-1.92,0,1.44,5.28]},{"name":"Classical","default":true,"gains":[0,0,0,0,0,0,-4.32,-4.32,-4.32,-5.76]},{"name":"Large Hall","default":true,"gains":[6.24,6.24,3.36,3.36,0,-2.88,-2.88,-2.88,0,0]},{"name":"Full Bass","default":true,"gains":[4.8,5.76,5.76,3.36,0.96,-2.4,-4.8,-6.24,-6.72,-6.72]},{"name":"Full Treble","default":true,"gains":[-5.76,-5.76,-5.76,-2.4,1.44,6.72,9.6,9.6,9.6,10.08]},{"name":"Laptop Speakers","default":true,"gains":[2.88,6.72,3.36,-1.92,-1.44,0.96,2.88,5.76,7.68,8.64]},{"name":"Full Bass &amp; Treble","default":true,"gains":[4.32,3.36,0,-4.32,-2.88,0.96,4.8,6.72,7.2,7.2]}],"whitelist":[]})</script></svg>