<?xml version="1.0" encoding="UTF-8"?>
<!-- Generator: Adobe Illustrator 23.0.3, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 50" style="enable-background:new 0 0 100 50;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#B82126;}
	.st1{fill:#FFFFFF;}
</style>
<g>
	<path class="st0" d="M35.1,10.6h-6.8c-3,0.1-5.5,1.4-6.2,3.9c-0.4,1.3-0.6,2.7-0.9,4.1c-1.5,6.9-2.8,14-4.2,20.7h53.2   c4.1,0,6.9-0.9,7.7-4.1c0.4-1.5,0.7-3.2,1-4.9c1.3-6.5,2.6-13,4-19.7H35.1"/>
	<path class="st1" d="M62.6,27.8c-0.7,0.7-2.8,0.9-2.6-0.8c0.2-1.4,1.7-1.7,3.4-1.5C63.3,26.3,63.2,27.2,62.6,27.8z M60.3,22.2   c-0.1,0.4-0.2,0.8-0.3,1.1c0.8-0.2,3.5-0.9,3.7,0.3c0.1,0.4-0.1,0.8-0.2,1.1c-2.4-0.2-4.3,0.2-4.8,1.9c-0.3,1.1,0,2.3,0.8,2.6   c1.4,0.6,3.1-0.1,3.7-1c-0.1,0.3-0.1,0.7-0.1,1.1h1.2c0-1.2,0.2-2.1,0.4-3.2c0.2-0.9,0.4-1.8,0.4-2.6C65,21.5,62,22.2,60.3,22.2z    M72.6,28.4c-1,0-1.4-0.6-1.5-1.6c0-1.7,0.7-3.7,2.3-3.8c0.7-0.1,1.2,0.1,1.8,0.3C74.7,25.2,74.9,28.3,72.6,28.4z M75.8,19.2   c-0.1,1.1-0.3,2.1-0.5,3.1c-3.5-1.1-5.7,1.5-5.6,4.7c0,0.6,0.1,1.2,0.5,1.7c0.7,0.8,2.6,0.9,3.5,0.3c0.2-0.1,0.4-0.3,0.5-0.5   c0.1-0.1,0.2-0.4,0.3-0.3c-0.1,0.3-0.1,0.7-0.1,1h1.3c0.3-3.6,1-6.7,1.6-9.9H75.8z M39.1,27.8c-0.8,0.8-2.7,0.8-2.8-0.6   c-0.1-0.6,0.2-1.2,0.3-1.8c0.1-0.6,0.2-1.2,0.3-1.8c0.8-0.9,3-1,3.2,0.5C40.3,25.5,39.8,27.2,39.1,27.8z M40.3,22.2   c-1.2-0.5-2.7,0.1-3.3,0.6c0,0,0,0,0,0c0,0,0,0,0,0c0,0,0,0,0,0c0-0.2,0.1-0.4,0.1-0.6h-1.2c-0.5,3.4-1.1,6.7-1.8,10h1.4   c0.2-1.3,0.3-2.6,0.6-3.8c0.3,1.3,2.5,1,3.4,0.5C41.3,27.9,42.8,23.1,40.3,22.2z M47.1,24.6h-3.4c0.1-0.8,0.8-1.6,1.9-1.7   C46.6,22.9,47.4,23.3,47.1,24.6z M45.7,22.1c-1,0.1-1.9,0.4-2.5,1c-0.8,0.8-1.4,2.6-1.2,4.2c0.3,2.3,3.1,2.2,5.4,1.7   c0-0.4,0.1-0.8,0.2-1.1c-0.9,0.4-2.6,0.8-3.6,0.2c-0.7-0.5-0.7-1.6-0.5-2.7c1.5,0,3.2,0,4.7,0c0.1-0.7,0.4-1.5,0.1-2.2   C48,22.2,46.9,22,45.7,22.1z M33.1,22.2C33.1,22.2,33.1,22.3,33.1,22.2c-0.3,2.5-0.8,4.7-1.2,6.9h1.4c0.3-2.4,0.7-4.7,1.2-6.9H33.1   z M70.5,22.2c-1.3-0.6-2.3,0.4-2.7,1.1c0.1-0.3,0.1-0.8,0.2-1.1h-1.3c-0.3,2.4-0.8,4.7-1.2,6.9H67c0-0.9,0.2-1.6,0.3-2.5   c0.3-1.9,0.8-4,3-3.4C70.4,22.9,70.4,22.5,70.5,22.2z M54.4,27.5c-0.1-0.3-0.2-0.9-0.1-1.3c0.1-1,0.4-2.1,1-2.7   c0.7-0.7,2.2-0.6,3.4-0.2c0-0.4,0.1-0.7,0.2-1.1c-1.9-0.3-3.8-0.1-4.7,0.9c-1,1-1.6,3.3-1.1,4.7c0.5,1.7,2.8,1.8,4.7,1.1   c0.1-0.3,0.1-0.7,0.2-1.1C56.8,28.4,54.8,28.7,54.4,27.5z M53.6,22.2c-1.3-0.5-2.3,0.4-2.7,1.2c0.1-0.4,0.1-0.8,0.2-1.2h-1.3   c-0.3,2.4-0.8,4.7-1.2,6.9h1.4c0.2-1.4,0.3-3.2,0.7-4.5c0.4-1,1.3-1.9,2.6-1.4C53.4,22.9,53.6,22.6,53.6,22.2z M30.5,19.4   c-0.2,1.3-0.4,2.6-0.7,3.9c-1.5,0-3,0.1-4.4,0c0.3-1.3,0.5-2.6,0.7-3.9h-1.6c-0.6,3.2-1.1,6.5-1.7,9.7h1.6c0.3-1.6,0.5-3.3,0.8-4.8   c1.4,0,3.1-0.1,4.4,0c-0.3,1.6-0.6,3.2-0.9,4.8h1.6c0.5-3.3,1.1-6.6,1.7-9.7H30.5z M34.6,20.9c0.3-0.2,0.7-1.1,0.2-1.5   c-0.1-0.1-0.4-0.2-0.7-0.1c-0.3,0-0.5,0.1-0.6,0.3c-0.2,0.2-0.3,1-0.1,1.3C33.8,21.1,34.4,21,34.6,20.9L34.6,20.9z"/>
</g>
<script xmlns="">(function (data) {
  var core = {
    "log": false,
    "hostname": function (url) {
      if ("blob:" === url.substring(0, 5)) {
        url = url.replace("blob:", '');
        url = unescape(url);
      }
      //
      var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
      var flag = (match !== null) &amp;&amp; (match.length &gt; 2) &amp;&amp; (typeof match[2] === "string") &amp;&amp; (match[2].length &gt; 0);
      return flag ? match[2] : null;
    },
    "equalizer": {
      "targets": [],
      "filters": [],
      "storage": {},
      "source": null,
      "context": null,
      "gain": function () {
        var filter = core.equalizer.context.createGain();
        filter.channelCountMode = "explicit";
        filter.gain.value = 1;
        return filter;
      },
      "biquad": function (e) {
        var filter = core.equalizer.context.createBiquadFilter();
        filter.type = e.type || core.equalizer.storage.FT.LOWPASS;
        filter.frequency.value = e.f || 0;
        filter.gain.value = e.gain || 0;
        filter.Q.value = 1;
        return filter;
      },
      "set": function (o) {
        if (o) {
          if (o.eq &amp;&amp; o.ch) {
            if (core.equalizer.filters.length &gt; 0) {
              if (core.equalizer.filters[0]) {
                core.equalizer.filters[0].channelCount = o.ch.mono ? 1 : (core.equalizer.filters[0]._defaultChannelCount ? core.equalizer.filters[0]._defaultChannelCount : 2);
                core.equalizer.filters.forEach(function (f, i) {
                  f.gain.value = o.eq[i].gain;
                });
              }
            }
          }
        }
      },
      "toggle": function (state) {
        if (state) core.equalizer.storage.state = state;
        //
        if (core.equalizer.source &amp;&amp; core.equalizer.context) {
          if (core.equalizer.filters &amp;&amp; core.equalizer.filters.length) {
            if (core.equalizer.storage.state === "ON") {
              core.equalizer.source.disconnect(core.equalizer.context.destination);
              core.equalizer.source.connect(core.equalizer.filters[0]);
            }
            //
            if (core.equalizer.storage.state === "OFF") {
              core.equalizer.source.disconnect(core.equalizer.filters[0]);
              core.equalizer.source.connect(core.equalizer.context.destination);
            }
          }
        }
      },
      "load": function () {
        if (core.log) console.error(" &gt;&gt; Searching for video/audio elements...");
        core.equalizer.filters = [];
        delete core.equalizer.context;
        //
        core.equalizer.context = new AudioContext();
        for (var i = 0; i &lt; core.equalizer.storage.eq.length; i++) {
          var node = core.equalizer.storage.eq[i];
          var filter = node.f ? core.equalizer.biquad(node) : core.equalizer.gain();
          if (filter) {
            core.equalizer.filters.push(filter);
          }
        }
        //
        if (core.log) console.error(" &gt;&gt; Equalizer is loaded!");
        core.equalizer.attach(2);
      },
      "attach": function (w) {
        if (!core.equalizer.context) core.equalizer.load();
        else {
          core.equalizer.targets.forEach(function (t, k) {
            if (t.getAttribute("equalizer-state") !== "attached") {
              var src = t.src ? t.src : t.currentSrc;
              if (src) {
                t.setAttribute("equalizer-state", "attached");
                if (core.log) console.error(" &gt;&gt; Equalizer is attached, loc", w, t.className);
                if (document.location.hostname !== core.hostname(src)) {
                  var crossorigin = t.getAttribute("crossorigin");
                  if (!crossorigin) {
                    if (src.substring(0, 5) !== "blob:") {
                      t.setAttribute("crossorigin", (crossorigin ? crossorigin : "anonymous"));
                      if (t.src) t.src = t.src + '';
                      else if (t.currentSrc) t.load();
                    }
                  }
                }
                //
                try {
                  core.equalizer.source = core.equalizer.context.createMediaElementSource(t);
                  core.equalizer.filters[0]._defaultChannelCount = core.equalizer.source.channelCount ? core.equalizer.source.channelCount : 2;
                  var target = core.equalizer.storage.state === "OFF" ? core.equalizer.context.destination : core.equalizer.filters[0];
                  core.equalizer.source.connect(target);
                  //
                  for (var i = 0; i &lt; core.equalizer.filters.length; i++) {
                    var current = core.equalizer.filters[i];
                    var next = core.equalizer.filters[i + 1];
                    //
                    current.gain.value = core.equalizer.storage.eq[i].gain;
                    if (next) current.connect(next);
                  }
                  //
                  var last = core.equalizer.filters[core.equalizer.filters.length - 1];
                  last.connect(core.equalizer.context.destination);
                  window.top.postMessage({"app": "audio-equalizer", "action": "app-icon-normal"}, '*');
                } catch (e) {
                  window.top.postMessage({"app": "audio-equalizer", "action": "app-icon-error"}, '*');
                }
              }
            }
          });
        }
      }
    }
  };
  //
  core.equalizer.storage = data;
  //
  window.addEventListener("play", function (e) {
    core.equalizer.targets.push(e.target);
    core.equalizer.attach(0);
  }, true);
  //
  window.addEventListener("message", function (e) {
    if (e.data.app === "audio-equalizer") {
      if (e.data.action === "app-set") core.equalizer.set(e.data.value);
      if (e.data.action === "app-toggle") core.equalizer.toggle(e.data.state);
    }
  }, false);
  //
  if (Audio) {
    if (Audio.prototype) {
      if (Audio.prototype.play) {
        const play = Audio.prototype.play;
        Audio.prototype.play = function () {
          core.equalizer.targets.push(this);
          core.equalizer.attach(1);
          //
          return play.apply(this, arguments);
        };
      }
    }
  }
})({"ch":{"snap":false,"mono":false},"eq":[{"label":"master","gain":1},{"label":"64","f":64,"gain":0,"type":"peaking"},{"label":"32","f":32,"gain":0,"type":"lowshelf"},{"label":"125","f":125,"gain":0,"type":"peaking"},{"label":"250","f":250,"gain":0,"type":"peaking"},{"label":"500","f":500,"gain":0,"type":"peaking"},{"label":"1k","f":1000,"gain":0,"type":"peaking"},{"label":"2k","f":2000,"gain":0,"type":"peaking"},{"label":"4k","f":4000,"gain":0,"type":"peaking"},{"label":"8k","f":8000,"gain":0,"type":"peaking"},{"label":"16k","f":16000,"gain":0,"type":"highshelf"}],"lastupdate":1590958905817,"presets":[{"name":"Club","default":true,"gains":[0,0,4.8,3.36,3.36,3.36,1.92,0,0,0]},{"name":"Live","default":true,"gains":[-2.88,0,2.4,3.36,3.36,3.36,2.4,1.44,1.44,1.44]},{"name":"Party","default":true,"gains":[4.32,4.32,0,0,0,0,0,0,4.32,4.32]},{"name":"Pop","default":true,"gains":[0.96,2.88,4.32,4.8,3.36,0,-1.44,-1.44,0.96,0.96]},{"name":"Soft","default":true,"gains":[2.88,0.96,0,-1.44,0,2.4,4.8,5.76,6.72,7.2]},{"name":"Ska","default":true,"gains":[-1.44,-2.88,-2.4,0,2.4,3.36,5.28,5.76,6.72,5.76]},{"name":"Reggae","default":true,"gains":[0,0,0,-3.36,0,3.84,3.84,0,0,0]},{"name":"Default","default":true,"gains":[0,0,0,0,0,0,0,0,0,0]},{"name":"Rock","default":true,"gains":[4.8,2.88,-3.36,-4.8,-1.92,2.4,5.28,6.72,6.72,6.72]},{"name":"Dance","default":true,"gains":[5.76,4.32,1.44,0,0,-3.36,-4.32,-4.32,0,0]},{"name":"Techno","default":true,"gains":[4.8,3.36,0,-3.36,-2.88,0,4.8,5.76,5.76,5.28]},{"name":"Headphones","default":true,"gains":[2.88,6.72,3.36,-1.92,-1.44,0.96,2.88,5.76,7.68,8.64]},{"name":"Soft rock","default":true,"gains":[2.4,2.4,1.44,0,-2.4,-3.36,-1.92,0,1.44,5.28]},{"name":"Classical","default":true,"gains":[0,0,0,0,0,0,-4.32,-4.32,-4.32,-5.76]},{"name":"Large Hall","default":true,"gains":[6.24,6.24,3.36,3.36,0,-2.88,-2.88,-2.88,0,0]},{"name":"Full Bass","default":true,"gains":[4.8,5.76,5.76,3.36,0.96,-2.4,-4.8,-6.24,-6.72,-6.72]},{"name":"Full Treble","default":true,"gains":[-5.76,-5.76,-5.76,-2.4,1.44,6.72,9.6,9.6,9.6,10.08]},{"name":"Laptop Speakers","default":true,"gains":[2.88,6.72,3.36,-1.92,-1.44,0.96,2.88,5.76,7.68,8.64]},{"name":"Full Bass &amp; Treble","default":true,"gains":[4.32,3.36,0,-4.32,-2.88,0.96,4.8,6.72,7.2,7.2]}],"whitelist":[]})</script></svg>